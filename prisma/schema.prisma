generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Province {
  id   Int    @id @default(autoincrement())
  name String
  City City[]
}

model City {
  id         Int        @id @default(autoincrement())
  name       String
  Province   Province   @relation(fields: [provinceId], references: [id])
  provinceId Int
  Personal   Personal[]
}

model Gender {
  id               Int                @id @default(autoincrement())
  name             String
  Personal         Personal[]
  PersonalChildren PersonalChildren[]
}

model MaritalStatus {
  id       Int        @id @default(autoincrement())
  name     String
  Personal Personal[]
}

model Function {
  id                        Int                         @id @default(autoincrement())
  name                      String
  InstitutionalPersonalData InstitutionalPersonalData[]
}

model LaboralRegime {
  id                        Int                         @id @default(autoincrement())
  name                      String
  InstitutionalPersonalData InstitutionalPersonalData[]
}

model LaboralRelationship {
  id                        Int                         @id @default(autoincrement())
  name                      String
  InstitutionalPersonalData InstitutionalPersonalData[]
}

model Journal {
  id                        Int                         @id @default(autoincrement())
  name                      String
  InstitutionalPersonalData InstitutionalPersonalData[]
}

model Category {
  id                        Int                         @id @default(autoincrement())
  name                      String
  salary                    Float
  InstitutionalPersonalData InstitutionalPersonalData[]
}

model Personal {
  id                              Int                               @id @default(autoincrement())
  uuid                            String                            @unique
  identificationCard              String
  names                           String
  lastNames                       String
  phone                           String?
  email                           String?
  birthdate                       DateTime?
  address                         String?
  genderId                        Int?
  Gender                          Gender?                           @relation(fields: [genderId], references: [id])
  maritalStatusId                 Int?
  MaritalStatus                   MaritalStatus?                    @relation(fields: [maritalStatusId], references: [id])
  cityId                          Int?
  City                            City?                             @relation(fields: [cityId], references: [id])
  AssistancePersonalIdentificator AssistancePersonalIdentificator[]
  PersonalSchedule                PersonalSchedule[]
  Justification                   Justification[]
  InstitutionalPersonalData       InstitutionalPersonalData[]
  Title                           Title[]
  Certification                   Certification[]
  MedicalPersonalData             MedicalPersonalData[]
  PersonalChildren                PersonalChildren[]
  PersonalFile                    PersonalFile[]
  PersonalPhoto                   PersonalPhoto?
}

model PersonalChildren {
  id         Int      @id @default(autoincrement())
  personalId Int
  Personal   Personal @relation(fields: [personalId], references: [id])
  names      String
  lastNames  String
  birthdate  DateTime
  genderId   Int
  Gender     Gender   @relation(fields: [genderId], references: [id])
}

model PersonalFile {
  id            Int      @id @default(autoincrement())
  personalId    Int
  Personal      Personal @relation(fields: [personalId], references: [id])
  documentRoute String
  documentName  String
}

model PersonalPhoto {
  id         Int      @id @default(autoincrement())
  personalId Int      @unique
  Personal   Personal @relation(fields: [personalId], references: [id])
  photoRoute String
  photoName  String
}

model InstitutionalPersonalData {
  id                    Int                  @id @default(autoincrement())
  personalId            Int
  Personal              Personal             @relation(fields: [personalId], references: [id])
  Category              Category?            @relation(fields: [categoryId], references: [id])
  categoryId            Int?
  functionId            Int?
  Function              Function?            @relation(fields: [functionId], references: [id])
  LaboralRegime         LaboralRegime?       @relation(fields: [laboralRegimeId], references: [id])
  laboralRegimeId       Int?
  LaboralRelationship   LaboralRelationship? @relation(fields: [laboralRelationshipId], references: [id])
  laboralRelationshipId Int?
  Journal               Journal?             @relation(fields: [journalId], references: [id])
  journalId             Int?
  CampusPersonal        CampusPersonal[]
}

model MedicalPersonalData {
  id                 Int        @id @default(autoincrement())
  personalId         Int
  Personal           Personal   @relation(fields: [personalId], references: [id])
  bloodTypeId        Int?
  BloodType          BloodType? @relation(fields: [bloodTypeId], references: [id])
  personalMedication String?
  personalDisease    String?
  personalAllergy    String?
}

model BloodType {
  id                  Int                   @id @default(autoincrement())
  name                String
  MedicalPersonalData MedicalPersonalData[]
}

model Justification {
  id                  Int                 @id @default(autoincrement())
  personalId          Int
  Personal            Personal            @relation(fields: [personalId], references: [id])
  affair              String
  fromDate            String
  toDate              String
  applicationDate     DateTime
  exitHour            String
  returnHour          String
  extraInfo           String
  Type                JustificationType   @relation(fields: [justificationTypeId], references: [id])
  justificationTypeId Int
  JustificationFile   JustificationFile[]
  statusId            Int
  JustificationStatus JustificationStatus @relation(fields: [statusId], references: [id])
}

model JustificationType {
  id            Int             @id @default(autoincrement())
  type          String
  Justification Justification[]
}

model JustificationFile {
  id              Int           @id @default(autoincrement())
  justificationId Int
  Justification   Justification @relation(fields: [justificationId], references: [id])
  documentRoute   String
  documentName    String
}

model JustificationStatus {
  id            Int             @id @default(autoincrement())
  name          String
  Justification Justification[]
}

model Title {
  id               Int      @id @default(autoincrement())
  personalId       Int
  Personal         Personal @relation(fields: [personalId], references: [id])
  title            String
  institution      String
  completitionYear Int
}

model Certification {
  id               Int      @id @default(autoincrement())
  personalId       Int
  Personal         Personal @relation(fields: [personalId], references: [id])
  certification    String
  institution      String
  completitionYear Int
}

model Campus {
  id                    Int                     @id @default(autoincrement())
  name                  String
  secondaryName         String
  address               String
  AssistanceDispositive AssistanceDispositive[]
  CampusPersonal        CampusPersonal[]
}

model CampusPersonal {
  id                          Int                        @id @default(autoincrement())
  campusId                    Int
  Campus                      Campus                     @relation(fields: [campusId], references: [id])
  personalId                  Int
  InstitutionalPersonalData   InstitutionalPersonalData? @relation(fields: [institutionalPersonalDataId], references: [id])
  institutionalPersonalDataId Int?
}

model PersonalSchedule {
  id         Int      @id @default(autoincrement())
  personalId Int
  Personal   Personal @relation(fields: [personalId], references: [id])
  dayOfWeek  Int
  start      String
  end        String
}

model AssistanceDispositive {
  id                              Int                               @id @default(autoincrement())
  name                            String
  campusId                        Int
  Campus                          Campus                            @relation(fields: [campusId], references: [id])
  serial                          String                            @unique
  AssistancePersonalIdentificator AssistancePersonalIdentificator[]
}

model AssistancePersonalIdentificator {
  id                      Int                    @id @default(autoincrement())
  code                    String
  personalId              Int
  Personal                Personal?              @relation(fields: [personalId], references: [id])
  assistanceDispositiveId Int
  AssistanceDispositive   AssistanceDispositive? @relation(fields: [assistanceDispositiveId], references: [id])
  Assistance              Assistance[]
}

model Assistance {
  id                                Int                             @id @default(autoincrement())
  clockCheck                        DateTime
  assistancePersonalIdentificatorId Int
  AssistancePersonalIdentificator   AssistancePersonalIdentificator @relation(fields: [assistancePersonalIdentificatorId], references: [id])
  AssistanceStatus                  AssistanceStatus?               @relation(fields: [assistanceStatusId], references: [id])
  assistanceStatusId                Int?
}

model AssistanceStatus {
  id         Int          @id @default(autoincrement())
  name       String
  Assistance Assistance[]
}
